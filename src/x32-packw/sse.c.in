// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR >= 4
$assert NR % 4 == 0
$assert KUNROLL >= 4
$assert KUNROLL % 4 == 0
$assert KUNROLL == 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <emmintrin.h>

#include <xnnpack/packw.h>


void xnn_x32_packw_gemm_goi_ukernel_x${NR}__sse2_x${KUNROLL}(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  const uint32_t* weights,
  const uint32_t* bias,
  uint32_t* packed_weights,
  size_t extra_bytes,
  const void* params)
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});   // This kernel is for NR=${NR}
  assert(kr == 1);
  assert(sr == 1);
  assert(weights != NULL);
  assert(packed_weights != NULL);

  const float* b = (const float*) bias;
  float* packed_w = (float*) packed_weights;
  do {
    // NC main loop multiple of ${NR}
    const float* w0 = (const float*) weights;
    size_t n = nc;

    for (; n >= ${NR}; n -= ${NR}) {
      if XNN_LIKELY(b != NULL) {
        const __m128 vb0 = _mm_loadu_ps(b);
        $for N in range(4,NR,4):
          const __m128 vb${N} = _mm_loadu_ps(b + ${N});
        _mm_store_ps(packed_w, vb0);
        $for N in range(4,NR,4):
          _mm_store_ps(packed_w + ${N}, vb${N});
        b += ${NR};
      }
      packed_w += ${NR};

      $for N in range(1, NR):
        const float* w${N} = w${N-1} + kc;

      // KC main loop multiple of ${NR}x${KUNROLL}
      size_t k = kc;
      for (; k >= ${KUNROLL}; k -= ${KUNROLL}) {
        // Read blocks of 4x4
        // a b c d
        // e f g h
        // i j k l
        // m n o p
        $for N in range(NR):
          __m128 v${N}x0123 = _mm_loadu_ps(w${N});
          $for K in range(4,KUNROLL,4):
            __m128 v${N}x${ABC[K:K+4]} = _mm_loadu_ps(w${N} + ${K});
          w${N} += ${KUNROLL};

        $for N in range(0,NR,4):
          $for K in range(0,KUNROLL,4):
            // Transpose 2x2
            const __m128 vtmp${N+0}x${ABC[K:K+4]} = _mm_unpacklo_ps(v${N+0}x${ABC[K:K+4]}, v${N+1}x${ABC[K:K+4]});  // a e b f   from row 0, 1
            const __m128 vtmp${N+1}x${ABC[K:K+4]} = _mm_unpacklo_ps(v${N+2}x${ABC[K:K+4]}, v${N+3}x${ABC[K:K+4]});  // i m j n   from row 2, 3
            const __m128 vtmp${N+2}x${ABC[K:K+4]} = _mm_unpackhi_ps(v${N+0}x${ABC[K:K+4]}, v${N+1}x${ABC[K:K+4]});  // c g d h   from row 0, 1
            const __m128 vtmp${N+3}x${ABC[K:K+4]} = _mm_unpackhi_ps(v${N+2}x${ABC[K:K+4]}, v${N+3}x${ABC[K:K+4]});  // k o l p   from row 2, 3
            // Transpose 4x4
            v${N+0}x${ABC[K:K+4]} = _mm_movelh_ps(vtmp${N+0}x${ABC[K:K+4]}, vtmp${N+1}x${ABC[K:K+4]});  // a e i m   from row 0, 1
            v${N+1}x${ABC[K:K+4]} = _mm_movehl_ps(vtmp${N+1}x${ABC[K:K+4]}, vtmp${N+0}x${ABC[K:K+4]});  // b f j n   from row 0, 1
            v${N+2}x${ABC[K:K+4]} = _mm_movelh_ps(vtmp${N+2}x${ABC[K:K+4]}, vtmp${N+3}x${ABC[K:K+4]});  // c g k o   from row 2, 3
            v${N+3}x${ABC[K:K+4]} = _mm_movehl_ps(vtmp${N+3}x${ABC[K:K+4]}, vtmp${N+2}x${ABC[K:K+4]});  // d h l p   from row 2, 3

        _mm_store_ps(packed_w, v0x0123);
        $for K in range(KUNROLL):
          $for N in range(0,NR,4):
            $if N != 0 or K != 0:
              _mm_store_ps(packed_w + ${N+K*NR}, v${N+K}x${ABC[K//4*4:K//4*4+4]});
        packed_w += ${NR*KUNROLL};
      }

      // KC remainder
      if XNN_UNLIKELY(k != 0) {
        for (; k >= 2; k -= 2) {
          // Read blocks of 4x2
          // a b
          // c d
          // e f
          // g h
          $for N in range(NR):
            __m128 v${N} = _mm_castpd_ps(_mm_load_sd((const double*) w${N}));
            w${N} += 2;

          $for N in range(0,NR,4):
            // Transpose 2x2
            const __m128 vtmp${N+0} = _mm_unpacklo_ps(v${N+0}, v${N+1});  // a c b d   from row 0, 1
            const __m128 vtmp${N+1} = _mm_unpacklo_ps(v${N+2}, v${N+3});  // e g f h   from row 2, 3
            // Transpose 4x4
            v${N+0} = _mm_movelh_ps(vtmp${N+0}, vtmp${N+1});  // a c e g   from row 0, 1
            v${N+1} = _mm_movehl_ps(vtmp${N+1}, vtmp${N+0});  // b d f h   from row 0, 1

          _mm_store_ps(packed_w, v0);
          $for K in range(2):
            $for N in range(0,NR,4):
              $if N != 0 or K != 0:
                _mm_store_ps(packed_w + ${N//4*4+K*NR}, v${N+K});
          packed_w += ${NR*2};
        }
        if (k == 1) {
          // Read blocks of 4x1
          // a
          // b
          // c
          // d
          $for N in range(NR):
            __m128 v${N} = _mm_load_ss(w${N});  w${N} += 1;

          $for N in range(0,NR,4):
            // Transpose 2x2
            const __m128 vtmp${N+0} = _mm_unpacklo_ps(v${N+0}, v${N+1});  // a b  from row 0, 1
            const __m128 vtmp${N+1} = _mm_unpacklo_ps(v${N+2}, v${N+3});  // c d  from row 2, 3
            // Transpose 4x4
            v${N+0} = _mm_movelh_ps(vtmp${N+0}, vtmp${N+1});  // a b c d   from row 0, 1

          _mm_store_ps(packed_w, v0);
          $for N in range(4,NR,4):
            _mm_store_ps(packed_w + ${N//4*4}, v${N});
          packed_w += ${NR};
        }
      }
      packed_w = (float*) ((uintptr_t) packed_w + extra_bytes);
      w0 = w${NR-1};
    }

    // NC remainder (1..${NR-1})
    if XNN_UNLIKELY(n != 0) {
      assert(n >= 1);
      assert(n <= ${NR-1});
      if XNN_LIKELY(b != NULL) {
        size_t nb = n;
        do {
          *packed_w++  = *b++;
        } while (--nb != 0);
        packed_w += (${NR} - n);
      } else {
        packed_w += ${NR};
      }

      // NR remainder has less than ${NR} rows so last row is not loaded
      // For SR=4 the
      $for N in range(1, NR-1):
        const float* w${N} = w${N-1} + kc;
        $if N % 2 == 0:
          if XNN_UNPREDICTABLE(n <= ${N}) {
            w${N} = w${N-1};
          }
        $else:
          if XNN_UNPREDICTABLE(n < ${N+1}) {
            w${N} = w${N-1};
          }

      // KC main loop multiple of ${NR}x${KUNROLL}
      size_t k = kc;
      for (; k >= ${KUNROLL}; k -= ${KUNROLL}) {
        // Read blocks of 4x4
        // a b c d
        // e f g h
        // i j k l
        // m n o p
        $for N in range(NR-1):
          __m128 v${N}x0123 = _mm_loadu_ps(w${N});
          $for K in range(4,KUNROLL,4):
            __m128 v${N}x${ABC[K:K+4]} = _mm_loadu_ps(w${N} + ${K});
          w${N} += ${KUNROLL};

        $for K in range(0,KUNROLL,4):
          __m128 v${NR-1}x${ABC[K:K+4]} = _mm_setzero_ps();

        $for N in range(0,NR,4):
          $for K in range(0,KUNROLL,4):
            // Transpose 2x2
            const __m128 vtmp${N+0}x${ABC[K:K+4]} = _mm_unpacklo_ps(v${N+0}x${ABC[K:K+4]}, v${N+1}x${ABC[K:K+4]});  // a e b f   from row 0, 1
            const __m128 vtmp${N+1}x${ABC[K:K+4]} = _mm_unpacklo_ps(v${N+2}x${ABC[K:K+4]}, v${N+3}x${ABC[K:K+4]});  // i m j n   from row 2, 3
            const __m128 vtmp${N+2}x${ABC[K:K+4]} = _mm_unpackhi_ps(v${N+0}x${ABC[K:K+4]}, v${N+1}x${ABC[K:K+4]});  // c g d h   from row 0, 1
            const __m128 vtmp${N+3}x${ABC[K:K+4]} = _mm_unpackhi_ps(v${N+2}x${ABC[K:K+4]}, v${N+3}x${ABC[K:K+4]});  // k o l p   from row 2, 3
            // Transpose 4x4
            v${N+0}x${ABC[K:K+4]} = _mm_movelh_ps(vtmp${N+0}x${ABC[K:K+4]}, vtmp${N+1}x${ABC[K:K+4]});  // a e i m   from row 0, 1
            v${N+1}x${ABC[K:K+4]} = _mm_movehl_ps(vtmp${N+1}x${ABC[K:K+4]}, vtmp${N+0}x${ABC[K:K+4]});  // b f j n   from row 0, 1
            v${N+2}x${ABC[K:K+4]} = _mm_movelh_ps(vtmp${N+2}x${ABC[K:K+4]}, vtmp${N+3}x${ABC[K:K+4]});  // c g k o   from row 2, 3
            v${N+3}x${ABC[K:K+4]} = _mm_movehl_ps(vtmp${N+3}x${ABC[K:K+4]}, vtmp${N+2}x${ABC[K:K+4]});  // d h l p   from row 2, 3

        _mm_store_ps(packed_w, v0x0123);
        $for K in range(KUNROLL):
          $for N in range(0,NR,4):
            $if N != 0 or K != 0:
              _mm_store_ps(packed_w + ${N+K*NR}, v${N+K}x${ABC[K//4*4:K//4*4+4]});
        packed_w += ${NR*KUNROLL};
      }

      // KC remainder
      if XNN_UNLIKELY(k != 0) {
        for (; k >= 2; k -= 2) {
          // Read blocks of 4x2
          // a b
          // c d
          // e f
          // g h
          $for N in range(NR-1):
            __m128 v${N} = _mm_castpd_ps(_mm_load_sd((const double*) w${N}));
            w${N} += 2;
          __m128 v${NR-1} = _mm_setzero_ps();

          $for N in range(0,NR,4):
            // Transpose 2x2
            const __m128 vtmp${N+0} = _mm_unpacklo_ps(v${N+0}, v${N+1});  // a c b d   from row 0, 1
            const __m128 vtmp${N+1} = _mm_unpacklo_ps(v${N+2}, v${N+3});  // e g f h   from row 2, 3
            // Transpose 4x4
            v${N+0} = _mm_movelh_ps(vtmp${N+0}, vtmp${N+1});  // a c e g   from row 0, 1
            v${N+1} = _mm_movehl_ps(vtmp${N+1}, vtmp${N+0});  // b d f h   from row 0, 1

          _mm_store_ps(packed_w, v0);
          $for K in range(2):
            $for N in range(0,NR,4):
              $if N != 0 or K != 0:
                _mm_store_ps(packed_w + ${N//4*4+K*NR}, v${N+K});
          packed_w += ${NR*2};
        }
        if (k == 1) {
          // Read blocks of 4x1
          // a
          // b
          // c
          // d
          $for N in range(NR-1):
            __m128 v${N} = _mm_load_ss(w${N});  w${N} += 1;
          __m128 v${NR-1} = _mm_setzero_ps();

          $for N in range(0,NR,4):
            // Transpose 2x2
            const __m128 vtmp${N+0} = _mm_unpacklo_ps(v${N+0}, v${N+1});  // a b  from row 0, 1
            const __m128 vtmp${N+1} = _mm_unpacklo_ps(v${N+2}, v${N+3});  // c d  from row 2, 3
            // Transpose 4x4
            v${N+0} = _mm_movelh_ps(vtmp${N+0}, vtmp${N+1});  // a b c d   from row 0, 1

          _mm_store_ps(packed_w, v0);
          $for N in range(4,NR,4):
            _mm_store_ps(packed_w + ${N//4*4}, v${N});
          packed_w += ${NR};
        }
      }
    }
    weights += nc * kc;
  } while (--g != 0);
}
